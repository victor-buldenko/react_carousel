{"version":3,"sources":["components/Carousel.tsx","App.tsx","index.tsx"],"names":["Carousel","state","images","props","disabled","autoplayId","counter","showLastSlide","autoplay","document","querySelectorAll","slides","Array","from","i","length","style","transform","window","setInterval","slideNext","animationDuration","clickNextHandler","clearInterval","onAutoplayChange","clickPrevHandler","slidePrev","setState","urls","infinite","step","k","setTimeout","end","transition","push","getAttribute","lastUrls","splice","LastSlides","unshift","timerId","timerId2","frameSize","slicedFirstElems","FirstElems","this","itemWidth","className","width","height","map","path","marginLeft","src","alt","type","onClick","React","Component","App","inputHandler","e","EnumInputProp","currentTarget","name","value","Step","FrameSize","ItemWidth","AnimationDuration","prevState","Autoplay","checked","autoplayStatus","action","id","min","max","placeholder","onChange","ReactDOM","render","getElementById"],"mappings":"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","file":"static/js/main.5835bdae.chunk.js","sourcesContent":["import React from 'react';\nimport './Carousel.scss';\n\ntype Props = {\n  images: string[];\n  step: number;\n  frameSize: number;\n  itemWidth: number;\n  animationDuration: number;\n  infinite: boolean;\n  autoplay: boolean;\n  onAutoplayChange: (autoplay: boolean) => void;\n};\n\ntype State = {\n  images: string[];\n  disabled : boolean;\n};\n\nexport class Carousel extends React.Component<Props, State> {\n  state = {\n    images: this.props.images,\n    disabled: false,\n  };\n\n  autoplayId = 0;\n\n  counter = 0;\n\n  showLastSlide = false;\n\n  componentDidMount(): void {\n    if (this.props.autoplay && this.autoplayId === 0) {\n      this.autoplayId = this.autoplay();\n    }\n  }\n\n  componentDidUpdate(): void {\n    if (this.props.autoplay && this.autoplayId === 0) {\n      this.autoplayId = this.autoplay();\n    }\n\n    if (!this.props.autoplay) {\n      clearInterval(this.autoplayId);\n      this.autoplayId = 0;\n    }\n  }\n\n  autoplay = (): number => {\n    const images: NodeListOf<HTMLImageElement> = document\n      .querySelectorAll('.image');\n    const slides = Array.from(\n      document.querySelectorAll('.Carousel__slide'),\n    ) as HTMLLIElement[];\n\n    for (let i = 0; i < slides.length; i += 1) {\n      slides[i].style.transform = 'translateX(0)';\n      images[i].style.transform = 'translateX(0)';\n    }\n\n    const timerId = window.setInterval(() => {\n      this.slideNext();\n    }, this.props.animationDuration + 1000);\n\n    return timerId;\n  };\n\n  clickNextHandler = () => {\n    clearInterval(this.autoplayId);\n    this.autoplayId = 0;\n    this.slideNext();\n\n    if (this.props.onAutoplayChange) {\n      this.props.onAutoplayChange(false);\n    }\n  };\n\n  clickPrevHandler = () => {\n    clearInterval(this.autoplayId);\n    this.autoplayId = 0;\n    this.slidePrev();\n\n    if (this.props.onAutoplayChange) {\n      this.props.onAutoplayChange(false);\n    }\n  };\n\n  slidePrev = () => {\n    clearInterval(this.autoplayId);\n    this.setState({ disabled: true });\n    const images: NodeListOf<HTMLImageElement> = document\n      .querySelectorAll('.image');\n    const slides = Array.from(\n      document.querySelectorAll('.Carousel__slide'),\n    ) as HTMLLIElement[];\n    const urls: string[] = [];\n\n    if (this.props.infinite) {\n      const { step, animationDuration } = this.props;\n\n      if (this.counter - step <= 0) {\n        for (let k = 0; k < slides.length; k += 1) {\n          slides[k].style.transform = 'translateX(0)';\n        }\n\n        this.counter = 0;\n\n        setTimeout(() => {\n          this.setState({ disabled: false });\n        }, animationDuration);\n\n        return;\n      }\n\n      for (let i = 0, end = slides.length - 1; i < slides.length; i += 1) {\n        slides[i].style.transform = `translateX(${-100 * step}%)`;\n        this.counter -= step;\n\n        if (i === end) {\n          setTimeout(() => {\n            this.showLastSlide = false;\n            this.setState({ disabled: false });\n          }, animationDuration);\n\n          return;\n        }\n      }\n    }\n\n    for (let i = 0; i < images.length; i += 1) {\n      images[i].style.transform = `translateX(-${100 * this.props.step}%)`;\n      images[i].style.transition = '0ms';\n      urls.push(images[i].getAttribute('src') as string);\n    }\n\n    const lastUrls: string[] = urls.splice(\n      slides.length - this.props.step,\n      this.props.step,\n    );\n    const LastSlides: HTMLLIElement[] = slides.splice(\n      slides.length - this.props.step,\n    );\n\n    urls.unshift(...lastUrls);\n    slides.unshift(...LastSlides);\n    this.setState({ images: urls });\n\n    const timerId = setTimeout(() => {\n      clearInterval(timerId);\n      for (let i = 0; i < images.length; i += 1) {\n        images[i].style.transform = 'translateX(0)';\n        images[i].style.transition = `${this.props.animationDuration}ms`;\n      }\n    }, 0);\n\n    const timerId2 = setTimeout(() => {\n      clearInterval(timerId2);\n      this.setState({ disabled: false });\n    }, this.props.animationDuration);\n  };\n\n  slideNext = () => {\n    this.setState({ disabled: true });\n    const images: NodeListOf<HTMLImageElement> = document\n      .querySelectorAll('.image');\n    const urls: string[] = [];\n    const slides = Array.from(\n      document.querySelectorAll('.Carousel__slide'),\n    ) as HTMLLIElement[];\n\n    if (this.props.infinite && this.counter <= this.props.images.length) {\n      this.counter += this.props.step;\n\n      if (this.counter + this.props.frameSize > this.props.images.length) {\n        this.counter = this.props.images.length - this.props.frameSize;\n\n        for (let i = 0, end = slides.length - 1; i < slides.length; i += 1) {\n          slides[i].style.transform = `translateX(-${100 * this.counter}%)`;\n\n          if (i === end && this.showLastSlide) {\n            setTimeout(() => {\n              for (let k = 0; k < slides.length; k += 1) {\n                slides[k].style.transform = 'translateX(0)';\n              }\n\n              this.counter = 0;\n              this.showLastSlide = false;\n              this.setState({ disabled: false });\n            }, this.props.animationDuration);\n\n            return;\n          }\n\n          if (i === end) {\n            this.showLastSlide = true;\n            this.setState({ disabled: false });\n\n            return;\n          }\n        }\n      }\n\n      for (let i = 0, end = slides.length - 1; i < slides.length; i += 1) {\n        slides[i].style.transform = `translateX(-${100 * this.counter}%)`;\n\n        if (i === end) {\n          setTimeout(() => {\n            this.setState({ disabled: false });\n          }, this.props.animationDuration);\n\n          return;\n        }\n      }\n    }\n\n    for (let i = 0; i < images.length; i += 1) {\n      images[i].style.transition = `${this.props.animationDuration}ms`;\n      images[i].style.transform = `translateX(-${100 * this.props.step}%)`;\n      urls.push(images[i].getAttribute('src') as string);\n    }\n\n    this.setState({ images: urls, disabled: true });\n\n    const timerId = setTimeout(() => {\n      for (let i = 0; i < images.length; i += 1) {\n        images[i].style.transition = '0ms';\n        images[i].style.transform = '';\n      }\n\n      const slicedFirstElems: string[] = urls.splice(0, this.props.step);\n      const FirstElems = slides.splice(0, this.props.step);\n\n      urls.push(...slicedFirstElems);\n      slides.push(...FirstElems);\n\n      clearInterval(timerId);\n      this.setState({ images: urls, disabled: false });\n    }, this.props.animationDuration);\n  };\n\n  render() {\n    const { images } = this.state;\n    const { frameSize, itemWidth, animationDuration } = this.props;\n\n    return (\n      <div className=\"Carousel\">\n        <ul\n          className=\"Carousel__list\"\n          style={{\n            width: `${itemWidth * frameSize}px`,\n            height: `${itemWidth}px`,\n          }}\n        >\n          {images.map((path, i) => (\n            <li\n              className=\"Carousel__slide\"\n              key={path}\n              style={{\n                marginLeft: 0,\n                width: `${itemWidth}px`,\n                height: `${itemWidth}px`,\n                transition: `${animationDuration}ms`,\n                transform: `translateX(${0}px)`,\n              }}\n            >\n              <img\n                src={path}\n                alt={`${i}`}\n                className=\"image\"\n                style={{\n                  transition: `${animationDuration}ms`,\n                }}\n              />\n            </li>\n          ))}\n        </ul>\n\n        <button\n          type=\"button\"\n          className=\"button buttonPrev\"\n          onClick={() => this.clickPrevHandler()}\n          disabled={this.state.disabled}\n        >\n          &#9001;\n        </button>\n\n        <button\n          type=\"button\"\n          className=\"button buttonNext\"\n          data-cy=\"next\"\n          onClick={() => this.clickNextHandler()}\n          disabled={this.state.disabled}\n        >\n          &#9002;\n        </button>\n      </div>\n    );\n  }\n}\n","import React from 'react';\nimport './App.scss';\nimport { Carousel } from './components/Carousel';\n\ninterface State {\n  images: string[];\n  step: number,\n  frameSize: number;\n  itemWidth: number;\n  animationDuration: number;\n  infinite: boolean,\n  autoplay: boolean,\n}\n\nclass App extends React.Component<{}, State> {\n  state = {\n    images: [\n      './img/1.png',\n      './img/2.png',\n      './img/3.png',\n      './img/4.png',\n      './img/5.png',\n      './img/6.png',\n      './img/7.png',\n      './img/8.png',\n      './img/9.png',\n      './img/10.png',\n    ],\n    step: 3,\n    frameSize: 3,\n    itemWidth: 130,\n    animationDuration: 1000,\n    infinite: false,\n    autoplay: false,\n  };\n\n  inputHandler = (e: { currentTarget: HTMLInputElement }) => {\n    enum EnumInputProp {\n      Step = 'step',\n      FrameSize = 'frameSize',\n      ItemWidth = 'itemWidth',\n      AnimationDuration = 'animationDuration',\n      Autoplay = 'autoplay',\n    }\n\n    const { name, value } = e.currentTarget;\n\n    switch (name) {\n      case EnumInputProp.Step:\n      case EnumInputProp.FrameSize:\n      case EnumInputProp.ItemWidth:\n      case EnumInputProp.AnimationDuration:\n        this.setState(prevState => (\n          { ...prevState, [name]: +value }));\n        break;\n\n      case EnumInputProp.Autoplay:\n        this.setState({ autoplay: e.currentTarget.checked, infinite: false });\n        break;\n\n      default:\n        this.setState({ infinite: e.currentTarget.checked, autoplay: false });\n        break;\n    }\n  };\n\n  render() {\n    const {\n      images,\n      step = 3,\n      frameSize = 3,\n      itemWidth = 130,\n      animationDuration = 1000,\n      infinite = false,\n      autoplay = false,\n    } = this.state;\n\n    return (\n      <div className=\"App\">\n        {/* eslint-disable-next-line */}\n        <h1\n          data-cy=\"title\"\n          className=\"title\"\n        >\n          {`Carousel with ${images.length} images`}\n        </h1>\n\n        <Carousel\n          images={images}\n          step={step}\n          frameSize={frameSize}\n          itemWidth={itemWidth}\n          animationDuration={animationDuration}\n          infinite={infinite}\n          autoplay={autoplay}\n          onAutoplayChange={(autoplayStatus) => {\n            this.setState({ autoplay: autoplayStatus });\n          }}\n        />\n\n        <form action=\"#\" className=\"form\">\n          <label className=\"label\">\n            Slide step\n            <input\n              className=\"input\"\n              type=\"number\"\n              name=\"step\"\n              id=\"inputStep\"\n              min=\"1\"\n              max=\"3\"\n              placeholder={`${step}`}\n              onChange={this.inputHandler}\n            />\n          </label>\n          <label className=\"label\">\n            Frame size\n            <input\n              className=\"input\"\n              type=\"number\"\n              name=\"frameSize\"\n              id=\"frameSize\"\n              min=\"1\"\n              max=\"5\"\n              placeholder={`${frameSize}`}\n              onChange={this.inputHandler}\n            />\n          </label>\n          <label className=\"label\">\n            Slide width\n            <input\n              className=\"input\"\n              type=\"number\"\n              name=\"itemWidth\"\n              id=\"itemWidth\"\n              min=\"130\"\n              max=\"350\"\n              step=\"20\"\n              placeholder={`${itemWidth}`}\n              onChange={this.inputHandler}\n            />\n          </label>\n          <label className=\"label\">\n            Animation\n            <input\n              className=\"input\"\n              type=\"number\"\n              name=\"animationDuration\"\n              id=\"animationDuration\"\n              min=\"100\"\n              max=\"5000\"\n              step=\"100\"\n              placeholder={`${animationDuration}`}\n              onChange={this.inputHandler}\n            />\n          </label>\n          <label className=\"label\">\n            Autoplay\n            <input\n              className=\"checkbox\"\n              type=\"checkbox\"\n              name=\"autoplay\"\n              id=\"autoplay\"\n              checked={this.state.autoplay}\n              onChange={this.inputHandler}\n            />\n          </label>\n\n          <label className=\"label\">\n            Is finite\n            <input\n              className=\"checkbox\"\n              type=\"checkbox\"\n              name=\"infinite\"\n              id=\"infinite\"\n              checked={this.state.infinite}\n              onChange={this.inputHandler}\n            />\n          </label>\n        </form>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","import ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}