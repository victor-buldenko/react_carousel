{"version":3,"sources":["App.tsx","components/Carousel.tsx","index.tsx"],"names":["EnumInputProp","Carousel","autoplayId","counter","showLastSlide","imagesSrc","props","images","state","disabled","autoplay","document","querySelectorAll","slides","Array","from","i","length","style","transform","window","setInterval","slideNext","animationDuration","clickNextHandler","clearInterval","onAutoplayChange","clickPrevHandler","slidePrev","setState","urls","infinite","step","k","setTimeout","end","transition","push","getAttribute","lastUrls","splice","LastSlides","unshift","timerId","timerId2","frameSize","slicedFirstElems","FirstElems","this","itemWidth","className","width","height","map","path","marginLeft","src","alt","type","onClick","React","Component","App","inputHandler","e","currentTarget","name","value","Step","FrameSize","ItemWidth","AnimationDuration","prevState","Autoplay","checked","autoplayStatus","action","id","min","max","placeholder","onChange","ReactDOM","render","getElementById"],"mappings":"sKAcKA,E,yGCKQC,EAAb,4MACEC,WAAa,EADf,EAGEC,QAAU,EAHZ,EAKEC,eAAgB,EALlB,EAOEC,UAAY,EAAKC,MAAMC,OAPzB,EASEC,MAAQ,CACND,OAAQ,EAAKF,UACbI,UAAU,GAXd,EA+BEC,SAAW,WAOT,IANA,IAAMH,EAAuCI,SAC1CC,iBAAiB,UACdC,EAASC,MAAMC,KACnBJ,SAASC,iBAAiB,qBAGnBI,EAAI,EAAGA,EAAIH,EAAOI,OAAQD,GAAK,EACtCH,EAAOG,GAAGE,MAAMC,UAAY,gBAC5BZ,EAAOS,GAAGE,MAAMC,UAAY,gBAO9B,OAJgBC,OAAOC,aAAY,WACjC,EAAKC,cACJ,EAAKhB,MAAMiB,kBAAoB,MA7CtC,EAkDEC,iBAAmB,WACjBC,cAAc,EAAKvB,YACnB,EAAKA,WAAa,EAClB,EAAKoB,YAED,EAAKhB,MAAMoB,kBACb,EAAKpB,MAAMoB,kBAAiB,IAxDlC,EA4DEC,iBAAmB,WACjBF,cAAc,EAAKvB,YACnB,EAAKA,WAAa,EAClB,EAAK0B,YAED,EAAKtB,MAAMoB,kBACb,EAAKpB,MAAMoB,kBAAiB,IAlElC,EAsEEE,UAAY,WACVH,cAAc,EAAKvB,YACnB,EAAK2B,SAAS,CAAEpB,UAAU,IAC1B,IAAMF,EAAuCI,SAC1CC,iBAAiB,UACdC,EAASC,MAAMC,KACnBJ,SAASC,iBAAiB,qBAEtBkB,EAAiB,GAEvB,GAAI,EAAKxB,MAAMyB,SAAU,CACvB,MAAoC,EAAKzB,MAAjC0B,EAAR,EAAQA,KAAMT,EAAd,EAAcA,kBAEd,GAAI,EAAKpB,QAAU6B,GAAQ,EAAG,CAC5B,IAAK,IAAIC,EAAI,EAAGA,EAAIpB,EAAOI,OAAQgB,GAAK,EACtCpB,EAAOoB,GAAGf,MAAMC,UAAY,gBAS9B,OANA,EAAKhB,QAAU,OAEf+B,YAAW,WACT,EAAKL,SAAS,CAAEpB,UAAU,MACzBc,GAKL,IAAK,IAAIP,EAAI,EAAGmB,EAAMtB,EAAOI,OAAS,EAAGD,EAAIH,EAAOI,OAAQD,GAAK,EAI/D,GAHAH,EAAOG,GAAGE,MAAMC,UAAhB,sBAA2C,IAAMa,EAAjD,MACA,EAAK7B,SAAW6B,EAEZhB,IAAMmB,EAMR,YALAD,YAAW,WACT,EAAK9B,eAAgB,EACrB,EAAKyB,SAAS,CAAEpB,UAAU,MACzBc,GAOT,IAAK,IAAIP,EAAI,EAAGA,EAAIT,EAAOU,OAAQD,GAAK,EACtCT,EAAOS,GAAGE,MAAMC,UAAhB,sBAA2C,IAAM,EAAKb,MAAM0B,KAA5D,MACAzB,EAAOS,GAAGE,MAAMkB,WAAa,MAC7BN,EAAKO,KAAK9B,EAAOS,GAAGsB,aAAa,QAGnC,IAAMC,EAAqBT,EAAKU,OAC9B3B,EAAOI,OAAS,EAAKX,MAAM0B,KAC3B,EAAK1B,MAAM0B,MAEPS,EAA8B5B,EAAO2B,OACzC3B,EAAOI,OAAS,EAAKX,MAAM0B,MAG7BF,EAAKY,QAAL,MAAAZ,EAAI,YAAYS,IAChB1B,EAAO6B,QAAP,MAAA7B,EAAM,YAAY4B,IAClB,EAAKZ,SAAS,CAAEtB,OAAQuB,IAExB,IAAMa,EAAUT,YAAW,WACzBT,cAAckB,GACd,IAAK,IAAI3B,EAAI,EAAGA,EAAIT,EAAOU,OAAQD,GAAK,EACtCT,EAAOS,GAAGE,MAAMC,UAAY,gBAC5BZ,EAAOS,GAAGE,MAAMkB,WAAhB,UAAgC,EAAK9B,MAAMiB,kBAA3C,QAED,GAEGqB,EAAWV,YAAW,WAC1BT,cAAcmB,GACd,EAAKf,SAAS,CAAEpB,UAAU,MACzB,EAAKH,MAAMiB,oBA7IlB,EAgJED,UAAY,WACV,EAAKO,SAAS,CAAEpB,UAAU,IAC1B,IAAMF,EAAuCI,SAC1CC,iBAAiB,UACdkB,EAAiB,GACjBjB,EAASC,MAAMC,KACnBJ,SAASC,iBAAiB,qBAG5B,GAAI,EAAKN,MAAMyB,UAAY,EAAK5B,SAAW,EAAKE,UAAUY,OAAQ,CAGhE,GAFA,EAAKd,SAAW,EAAKG,MAAM0B,KAEvB,EAAK7B,QAAU,EAAKG,MAAMuC,UAAY,EAAKxC,UAAUY,OAAQ,CAC/D,EAAKd,QAAU,EAAKE,UAAUY,OAAS,EAAKX,MAAMuC,UAElD,IAAK,IAAI7B,EAAI,EAAGmB,EAAMtB,EAAOI,OAAS,EAAGD,EAAIH,EAAOI,OAAQD,GAAK,EAAG,CAGlE,GAFAH,EAAOG,GAAGE,MAAMC,UAAhB,sBAA2C,IAAM,EAAKhB,QAAtD,MAEIa,IAAMmB,GAAO,EAAK/B,cAWpB,YAVA8B,YAAW,WACT,IAAK,IAAID,EAAI,EAAGA,EAAIpB,EAAOI,OAAQgB,GAAK,EACtCpB,EAAOoB,GAAGf,MAAMC,UAAY,gBAG9B,EAAKhB,QAAU,EACf,EAAKC,eAAgB,EACrB,EAAKyB,SAAS,CAAEpB,UAAU,MACzB,EAAKH,MAAMiB,mBAKhB,GAAIP,IAAMmB,EAIR,OAHA,EAAK/B,eAAgB,OACrB,EAAKyB,SAAS,CAAEpB,UAAU,KAOhC,IAAK,IAAIO,EAAI,EAAGmB,EAAMtB,EAAOI,OAAS,EAAGD,EAAIH,EAAOI,OAAQD,GAAK,EAG/D,GAFAH,EAAOG,GAAGE,MAAMC,UAAhB,sBAA2C,IAAM,EAAKhB,QAAtD,MAEIa,IAAMmB,EAKR,YAJAD,YAAW,WACT,EAAKL,SAAS,CAAEpB,UAAU,MACzB,EAAKH,MAAMiB,mBAOpB,IAAK,IAAIP,EAAI,EAAGA,EAAIT,EAAOU,OAAQD,GAAK,EACtCT,EAAOS,GAAGE,MAAMkB,WAAhB,UAAgC,EAAK9B,MAAMiB,kBAA3C,MACAhB,EAAOS,GAAGE,MAAMC,UAAhB,sBAA2C,IAAM,EAAKb,MAAM0B,KAA5D,MACAF,EAAKO,KAAK9B,EAAOS,GAAGsB,aAAa,QAGnC,EAAKT,SAAS,CAAEtB,OAAQuB,EAAMrB,UAAU,IAExC,IAAMkC,EAAUT,YAAW,WACzB,IAAK,IAAIlB,EAAI,EAAGA,EAAIT,EAAOU,OAAQD,GAAK,EACtCT,EAAOS,GAAGE,MAAMkB,WAAa,MAC7B7B,EAAOS,GAAGE,MAAMC,UAAY,GAG9B,IAAM2B,EAA6BhB,EAAKU,OAAO,EAAG,EAAKlC,MAAM0B,MACvDe,EAAalC,EAAO2B,OAAO,EAAG,EAAKlC,MAAM0B,MAE/CF,EAAKO,KAAL,MAAAP,EAAI,YAASgB,IACbjC,EAAOwB,KAAP,MAAAxB,EAAM,YAASkC,IAEftB,cAAckB,GACd,EAAKd,SAAS,CAAEtB,OAAQuB,EAAMrB,UAAU,MACvC,EAAKH,MAAMiB,oBA5NlB,uDAcE,WACMyB,KAAK1C,MAAMI,WAAasC,KAAK9C,aAC/B8C,KAAK9C,WAAa8C,KAAKtC,cAhB7B,gCAoBE,WACMsC,KAAK1C,MAAMI,UAAgC,IAApBsC,KAAK9C,aAC9B8C,KAAK9C,WAAa8C,KAAKtC,YAGpBsC,KAAK1C,MAAMI,WACde,cAAcuB,KAAK9C,YACnB8C,KAAK9C,WAAa,KA3BxB,oBA+NE,WAAU,IAAD,OACCK,EAAWyC,KAAKxC,MAAhBD,OACR,EAAoDyC,KAAK1C,MAAjDuC,EAAR,EAAQA,UAAWI,EAAnB,EAAmBA,UAAW1B,EAA9B,EAA8BA,kBAE9B,OACE,sBAAK2B,UAAU,WAAf,UACE,oBACEA,UAAU,iBACVhC,MAAO,CACLiC,MAAM,GAAD,OAAKF,EAAYJ,EAAjB,MACLO,OAAO,GAAD,OAAKH,EAAL,OAJV,SAOG1C,EAAO8C,KAAI,SAACC,EAAMtC,GAAP,OACV,oBACEkC,UAAU,kBAEVhC,MAAO,CACLqC,WAAY,EACZJ,MAAM,GAAD,OAAKF,EAAL,MACLG,OAAO,GAAD,OAAKH,EAAL,MACNb,WAAW,GAAD,OAAKb,EAAL,MACVJ,UAAU,cAAD,OAAgB,EAAhB,QARb,SAWE,qBACEqC,IAAKF,EACLG,IAAG,UAAKzC,GACRkC,UAAU,QACVhC,MAAO,CACLkB,WAAW,GAAD,OAAKb,EAAL,UAdT+B,QAqBX,wBACEI,KAAK,SACLR,UAAU,oBACVS,QAAS,kBAAM,EAAKhC,oBACpBlB,SAAUuC,KAAKxC,MAAMC,SAJvB,oBASA,wBACEiD,KAAK,SACLR,UAAU,oBACV,UAAQ,OACRS,QAAS,kBAAM,EAAKnC,oBACpBf,SAAUuC,KAAKxC,MAAMC,SALvB,2BA7QR,GAA8BmD,IAAMC,Y,SDL/B7D,K,YAAAA,E,sBAAAA,E,sBAAAA,E,sCAAAA,E,qBAAAA,M,SAQC8D,E,4MACJtD,MAAQ,CACND,OAAQ,CACN,cACA,cACA,cACA,cACA,cACA,cACA,cACA,cACA,cACA,gBAEFyB,KAAM,EACNa,UAAW,EACXI,UAAW,IACX1B,kBAAmB,IACnBQ,UAAU,EACVrB,UAAU,G,EAGZqD,aAAe,SAACC,GACd,MAAwBA,EAAEC,cAAlBC,EAAR,EAAQA,KAAMC,EAAd,EAAcA,MAEd,OAAQD,GACN,KAAKlE,EAAcoE,KACnB,KAAKpE,EAAcqE,UACnB,KAAKrE,EAAcsE,UACnB,KAAKtE,EAAcuE,kBACjB,EAAK1C,UAAS,SAAA2C,GAAS,kCAChBA,GADgB,kBACJN,GAAQC,OAC3B,MAEF,KAAKnE,EAAcyE,SACjB,EAAK5C,SAAS,CAAEnB,SAAUsD,EAAEC,cAAcS,QAAS3C,UAAU,IAC7D,MAEF,QACE,EAAKF,SAAS,CAAEE,SAAUiC,EAAEC,cAAcS,QAAShE,UAAU,M,4CAKnE,WAAU,IAAD,OACP,EAQIsC,KAAKxC,MAPPD,EADF,EACEA,OADF,IAEEyB,YAFF,MAES,EAFT,MAGEa,iBAHF,MAGc,EAHd,MAIEI,iBAJF,MAIc,IAJd,MAKE1B,yBALF,MAKsB,IALtB,MAMEQ,gBANF,aAOErB,gBAPF,SAUA,OACE,sBAAKwC,UAAU,MAAf,UAEE,oBACE,UAAQ,QACRA,UAAU,QAFZ,iCAIoB3C,EAAOU,OAJ3B,aAOA,cAAC,EAAD,CACEV,OAAQA,EACRyB,KAAMA,EACNa,UAAWA,EACXI,UAAWA,EACX1B,kBAAmBA,EACnBQ,SAAUA,EACVrB,SAAUA,EACVgB,iBAAkB,SAACiD,GACjB,EAAK9C,SAAS,CAAEnB,SAAUiE,OAI9B,uBAAMC,OAAO,IAAI1B,UAAU,OAA3B,UACE,wBAAOA,UAAU,QAAjB,uBAEE,uBACEA,UAAU,QACVQ,KAAK,SACLQ,KAAK,OACLW,GAAG,YACHC,IAAI,IACJC,IAAI,IACJC,YAAW,UAAKhD,GAChBiD,SAAUjC,KAAKe,kBAGnB,wBAAOb,UAAU,QAAjB,uBAEE,uBACEA,UAAU,QACVQ,KAAK,SACLQ,KAAK,YACLW,GAAG,YACHC,IAAI,IACJC,IAAI,IACJC,YAAW,UAAKnC,GAChBoC,SAAUjC,KAAKe,kBAGnB,wBAAOb,UAAU,QAAjB,wBAEE,uBACEA,UAAU,QACVQ,KAAK,SACLQ,KAAK,YACLW,GAAG,YACHC,IAAI,MACJC,IAAI,MACJ/C,KAAK,KACLgD,YAAW,UAAK/B,GAChBgC,SAAUjC,KAAKe,kBAGnB,wBAAOb,UAAU,QAAjB,sBAEE,uBACEA,UAAU,QACVQ,KAAK,SACLQ,KAAK,oBACLW,GAAG,oBACHC,IAAI,MACJC,IAAI,OACJ/C,KAAK,MACLgD,YAAW,UAAKzD,GAChB0D,SAAUjC,KAAKe,kBAGnB,wBAAOb,UAAU,QAAjB,qBAEE,uBACEA,UAAU,WACVQ,KAAK,WACLQ,KAAK,WACLW,GAAG,WACHH,QAAS1B,KAAKxC,MAAME,SACpBuE,SAAUjC,KAAKe,kBAInB,wBAAOb,UAAU,QAAjB,sBAEE,uBACEA,UAAU,WACVQ,KAAK,WACLQ,KAAK,WACLW,GAAG,WACHH,QAAS1B,KAAKxC,MAAMuB,SACpBkD,SAAUjC,KAAKe,4B,GAzJXH,IAAMC,WAkKTC,IErLfoB,IAASC,OAAO,cAAC,EAAD,IAASxE,SAASyE,eAAe,W","file":"static/js/main.49aff4a7.chunk.js","sourcesContent":["import React from 'react';\nimport './App.scss';\nimport { Carousel } from './components/Carousel';\n\ninterface State {\n  images: string[];\n  step: number,\n  frameSize: number;\n  itemWidth: number;\n  animationDuration: number;\n  infinite: boolean,\n  autoplay: boolean,\n}\n\nenum EnumInputProp {\n  Step = 'step',\n  FrameSize = 'frameSize',\n  ItemWidth = 'itemWidth',\n  AnimationDuration = 'animationDuration',\n  Autoplay = 'autoplay',\n}\n\nclass App extends React.Component<{}, State> {\n  state = {\n    images: [\n      './img/1.png',\n      './img/2.png',\n      './img/3.png',\n      './img/4.png',\n      './img/5.png',\n      './img/6.png',\n      './img/7.png',\n      './img/8.png',\n      './img/9.png',\n      './img/10.png',\n    ],\n    step: 3,\n    frameSize: 3,\n    itemWidth: 130,\n    animationDuration: 1000,\n    infinite: false,\n    autoplay: false,\n  };\n\n  inputHandler = (e: { currentTarget: HTMLInputElement }) => {\n    const { name, value } = e.currentTarget;\n\n    switch (name) {\n      case EnumInputProp.Step:\n      case EnumInputProp.FrameSize:\n      case EnumInputProp.ItemWidth:\n      case EnumInputProp.AnimationDuration:\n        this.setState(prevState => (\n          { ...prevState, [name]: +value }));\n        break;\n\n      case EnumInputProp.Autoplay:\n        this.setState({ autoplay: e.currentTarget.checked, infinite: false });\n        break;\n\n      default:\n        this.setState({ infinite: e.currentTarget.checked, autoplay: false });\n        break;\n    }\n  };\n\n  render() {\n    const {\n      images,\n      step = 3,\n      frameSize = 3,\n      itemWidth = 130,\n      animationDuration = 1000,\n      infinite = false,\n      autoplay = false,\n    } = this.state;\n\n    return (\n      <div className=\"App\">\n        {/* eslint-disable-next-line */}\n        <h1\n          data-cy=\"title\"\n          className=\"title\"\n        >\n          {`Carousel with ${images.length} images`}\n        </h1>\n\n        <Carousel\n          images={images}\n          step={step}\n          frameSize={frameSize}\n          itemWidth={itemWidth}\n          animationDuration={animationDuration}\n          infinite={infinite}\n          autoplay={autoplay}\n          onAutoplayChange={(autoplayStatus) => {\n            this.setState({ autoplay: autoplayStatus });\n          }}\n        />\n\n        <form action=\"#\" className=\"form\">\n          <label className=\"label\">\n            Slide step\n            <input\n              className=\"input\"\n              type=\"number\"\n              name=\"step\"\n              id=\"inputStep\"\n              min=\"1\"\n              max=\"3\"\n              placeholder={`${step}`}\n              onChange={this.inputHandler}\n            />\n          </label>\n          <label className=\"label\">\n            Frame size\n            <input\n              className=\"input\"\n              type=\"number\"\n              name=\"frameSize\"\n              id=\"frameSize\"\n              min=\"1\"\n              max=\"5\"\n              placeholder={`${frameSize}`}\n              onChange={this.inputHandler}\n            />\n          </label>\n          <label className=\"label\">\n            Slide width\n            <input\n              className=\"input\"\n              type=\"number\"\n              name=\"itemWidth\"\n              id=\"itemWidth\"\n              min=\"130\"\n              max=\"350\"\n              step=\"20\"\n              placeholder={`${itemWidth}`}\n              onChange={this.inputHandler}\n            />\n          </label>\n          <label className=\"label\">\n            Animation\n            <input\n              className=\"input\"\n              type=\"number\"\n              name=\"animationDuration\"\n              id=\"animationDuration\"\n              min=\"100\"\n              max=\"5000\"\n              step=\"100\"\n              placeholder={`${animationDuration}`}\n              onChange={this.inputHandler}\n            />\n          </label>\n          <label className=\"label\">\n            Autoplay\n            <input\n              className=\"checkbox\"\n              type=\"checkbox\"\n              name=\"autoplay\"\n              id=\"autoplay\"\n              checked={this.state.autoplay}\n              onChange={this.inputHandler}\n            />\n          </label>\n\n          <label className=\"label\">\n            Is finite\n            <input\n              className=\"checkbox\"\n              type=\"checkbox\"\n              name=\"infinite\"\n              id=\"infinite\"\n              checked={this.state.infinite}\n              onChange={this.inputHandler}\n            />\n          </label>\n        </form>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","import React from 'react';\nimport './Carousel.scss';\n\ntype Props = {\n  images: string[];\n  step: number;\n  frameSize: number;\n  itemWidth: number;\n  animationDuration: number;\n  infinite: boolean;\n  autoplay: boolean;\n  onAutoplayChange: (autoplay: boolean) => void;\n};\n\ntype State = {\n  images: string[];\n  disabled : boolean;\n};\n\nexport class Carousel extends React.Component<Props, State> {\n  autoplayId = 0;\n\n  counter = 0;\n\n  showLastSlide = false;\n\n  imagesSrc = this.props.images;\n\n  state = {\n    images: this.imagesSrc,\n    disabled: false,\n  };\n\n  componentDidMount(): void {\n    if (this.props.autoplay && !this.autoplayId) {\n      this.autoplayId = this.autoplay();\n    }\n  }\n\n  componentDidUpdate(): void {\n    if (this.props.autoplay && this.autoplayId === 0) {\n      this.autoplayId = this.autoplay();\n    }\n\n    if (!this.props.autoplay) {\n      clearInterval(this.autoplayId);\n      this.autoplayId = 0;\n    }\n  }\n\n  autoplay = (): number => {\n    const images: NodeListOf<HTMLImageElement> = document\n      .querySelectorAll('.image');\n    const slides = Array.from(\n      document.querySelectorAll('.Carousel__slide'),\n    ) as HTMLLIElement[];\n\n    for (let i = 0; i < slides.length; i += 1) {\n      slides[i].style.transform = 'translateX(0)';\n      images[i].style.transform = 'translateX(0)';\n    }\n\n    const timerId = window.setInterval(() => {\n      this.slideNext();\n    }, this.props.animationDuration + 1000);\n\n    return timerId;\n  };\n\n  clickNextHandler = () => {\n    clearInterval(this.autoplayId);\n    this.autoplayId = 0;\n    this.slideNext();\n\n    if (this.props.onAutoplayChange) {\n      this.props.onAutoplayChange(false);\n    }\n  };\n\n  clickPrevHandler = () => {\n    clearInterval(this.autoplayId);\n    this.autoplayId = 0;\n    this.slidePrev();\n\n    if (this.props.onAutoplayChange) {\n      this.props.onAutoplayChange(false);\n    }\n  };\n\n  slidePrev = () => {\n    clearInterval(this.autoplayId);\n    this.setState({ disabled: true });\n    const images: NodeListOf<HTMLImageElement> = document\n      .querySelectorAll('.image');\n    const slides = Array.from(\n      document.querySelectorAll('.Carousel__slide'),\n    ) as HTMLLIElement[];\n    const urls: string[] = [];\n\n    if (this.props.infinite) {\n      const { step, animationDuration } = this.props;\n\n      if (this.counter - step <= 0) {\n        for (let k = 0; k < slides.length; k += 1) {\n          slides[k].style.transform = 'translateX(0)';\n        }\n\n        this.counter = 0;\n\n        setTimeout(() => {\n          this.setState({ disabled: false });\n        }, animationDuration);\n\n        return;\n      }\n\n      for (let i = 0, end = slides.length - 1; i < slides.length; i += 1) {\n        slides[i].style.transform = `translateX(${-100 * step}%)`;\n        this.counter -= step;\n\n        if (i === end) {\n          setTimeout(() => {\n            this.showLastSlide = false;\n            this.setState({ disabled: false });\n          }, animationDuration);\n\n          return;\n        }\n      }\n    }\n\n    for (let i = 0; i < images.length; i += 1) {\n      images[i].style.transform = `translateX(-${100 * this.props.step}%)`;\n      images[i].style.transition = '0ms';\n      urls.push(images[i].getAttribute('src') as string);\n    }\n\n    const lastUrls: string[] = urls.splice(\n      slides.length - this.props.step,\n      this.props.step,\n    );\n    const LastSlides: HTMLLIElement[] = slides.splice(\n      slides.length - this.props.step,\n    );\n\n    urls.unshift(...lastUrls);\n    slides.unshift(...LastSlides);\n    this.setState({ images: urls });\n\n    const timerId = setTimeout(() => {\n      clearInterval(timerId);\n      for (let i = 0; i < images.length; i += 1) {\n        images[i].style.transform = 'translateX(0)';\n        images[i].style.transition = `${this.props.animationDuration}ms`;\n      }\n    }, 0);\n\n    const timerId2 = setTimeout(() => {\n      clearInterval(timerId2);\n      this.setState({ disabled: false });\n    }, this.props.animationDuration);\n  };\n\n  slideNext = () => {\n    this.setState({ disabled: true });\n    const images: NodeListOf<HTMLImageElement> = document\n      .querySelectorAll('.image');\n    const urls: string[] = [];\n    const slides = Array.from(\n      document.querySelectorAll('.Carousel__slide'),\n    ) as HTMLLIElement[];\n\n    if (this.props.infinite && this.counter <= this.imagesSrc.length) {\n      this.counter += this.props.step;\n\n      if (this.counter + this.props.frameSize > this.imagesSrc.length) {\n        this.counter = this.imagesSrc.length - this.props.frameSize;\n\n        for (let i = 0, end = slides.length - 1; i < slides.length; i += 1) {\n          slides[i].style.transform = `translateX(-${100 * this.counter}%)`;\n\n          if (i === end && this.showLastSlide) {\n            setTimeout(() => {\n              for (let k = 0; k < slides.length; k += 1) {\n                slides[k].style.transform = 'translateX(0)';\n              }\n\n              this.counter = 0;\n              this.showLastSlide = false;\n              this.setState({ disabled: false });\n            }, this.props.animationDuration);\n\n            return;\n          }\n\n          if (i === end) {\n            this.showLastSlide = true;\n            this.setState({ disabled: false });\n\n            return;\n          }\n        }\n      }\n\n      for (let i = 0, end = slides.length - 1; i < slides.length; i += 1) {\n        slides[i].style.transform = `translateX(-${100 * this.counter}%)`;\n\n        if (i === end) {\n          setTimeout(() => {\n            this.setState({ disabled: false });\n          }, this.props.animationDuration);\n\n          return;\n        }\n      }\n    }\n\n    for (let i = 0; i < images.length; i += 1) {\n      images[i].style.transition = `${this.props.animationDuration}ms`;\n      images[i].style.transform = `translateX(-${100 * this.props.step}%)`;\n      urls.push(images[i].getAttribute('src') as string);\n    }\n\n    this.setState({ images: urls, disabled: true });\n\n    const timerId = setTimeout(() => {\n      for (let i = 0; i < images.length; i += 1) {\n        images[i].style.transition = '0ms';\n        images[i].style.transform = '';\n      }\n\n      const slicedFirstElems: string[] = urls.splice(0, this.props.step);\n      const FirstElems = slides.splice(0, this.props.step);\n\n      urls.push(...slicedFirstElems);\n      slides.push(...FirstElems);\n\n      clearInterval(timerId);\n      this.setState({ images: urls, disabled: false });\n    }, this.props.animationDuration);\n  };\n\n  render() {\n    const { images } = this.state;\n    const { frameSize, itemWidth, animationDuration } = this.props;\n\n    return (\n      <div className=\"Carousel\">\n        <ul\n          className=\"Carousel__list\"\n          style={{\n            width: `${itemWidth * frameSize}px`,\n            height: `${itemWidth}px`,\n          }}\n        >\n          {images.map((path, i) => (\n            <li\n              className=\"Carousel__slide\"\n              key={path}\n              style={{\n                marginLeft: 0,\n                width: `${itemWidth}px`,\n                height: `${itemWidth}px`,\n                transition: `${animationDuration}ms`,\n                transform: `translateX(${0}px)`,\n              }}\n            >\n              <img\n                src={path}\n                alt={`${i}`}\n                className=\"image\"\n                style={{\n                  transition: `${animationDuration}ms`,\n                }}\n              />\n            </li>\n          ))}\n        </ul>\n\n        <button\n          type=\"button\"\n          className=\"button buttonPrev\"\n          onClick={() => this.clickPrevHandler()}\n          disabled={this.state.disabled}\n        >\n          &#9001;\n        </button>\n\n        <button\n          type=\"button\"\n          className=\"button buttonNext\"\n          data-cy=\"next\"\n          onClick={() => this.clickNextHandler()}\n          disabled={this.state.disabled}\n        >\n          &#9002;\n        </button>\n      </div>\n    );\n  }\n}\n","import ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}